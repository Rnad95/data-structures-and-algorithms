/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Challenge10;

import Challenge10.Queue.NodeQueue;
import Challenge10.Queue.Queue;
import Challenge10.Stack.NodeStack;
import Challenge10.Stack.Stack;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.NoSuchElementException;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    @Test void addOneItemOnStack(){
        Stack stack = new Stack();
        NodeStack expected = new NodeStack("Renad");
        NodeStack actual = stack.push(expected);
        assertEquals(expected, actual);
    }
    @Test void addMultipleItemOnStack(){
        Stack stack = new Stack();
        NodeStack expected1 = new NodeStack("Renad");
        NodeStack expected2 = new NodeStack("Jamil");
        NodeStack expected3 = new NodeStack("Khawatreh");
        NodeStack actual = stack.push(expected3);
        assertEquals(expected3.getItem(), actual.getItem());
    }
    @Test void popItemOnStack(){
        Stack stack = new Stack();
        stack.push(new NodeStack("Renad"));
        stack.push(new NodeStack("Mohammad"));
        stack.push(new NodeStack("Ali"));

        NodeStack popExpected = new NodeStack("Ali");
        assertEquals(popExpected.getItem(), stack.pop().getItem());
    }
    @Test void emptyUsingPop(){
        Stack stack = new Stack();
        stack.push(new NodeStack("Renad"));
        stack.push(new NodeStack("Mohammad"));
        stack.push(new NodeStack("Ali"));
        stack.pop();
        stack.pop();
        stack.pop();

        assertTrue(stack.isEmpty());
    }
    @Test void peekToNext() {
        Stack stack = new Stack();
        stack.push(new NodeStack("Renad"));
        stack.push(new NodeStack("Muna"));
        stack.push(new NodeStack("Islam"));
        NodeStack peekNextExpected = new NodeStack("Muna");
        assertEquals(peekNextExpected.getItem(),stack.peek().getNext().getItem());
    }
    @Test void instantiateEmptyStack() {
        Stack stack = new Stack();
        assertTrue(stack.isEmpty());
    }
    @Test void popEmptyStack() {
        Stack stack = new Stack();
        String str="";
        try{
            stack.pop();
        }catch (Exception err){
             str = "Error";
        }
        String expected = "Error";
        assertEquals(expected,str);
    }

//     ******************************  Queue Tests ***********************************************/
    @Test void addOneItemOnQueue(){
    Queue queue = new Queue();
    NodeQueue expected = new NodeQueue("Renad");
    assertTrue(queue.enqueue(expected));
}
    @Test void addMultipleItemOnQueue(){
        Queue queue = new Queue();
        queue.enqueue( new NodeQueue("Renad"));
        queue.enqueue( new NodeQueue("Jamil"));
        queue.enqueue( new NodeQueue("Khawatreh"));


        assertEquals(3, queue.getSIZE());
    }
    @Test void dequeueItemOnQueue(){
        Queue queue = new Queue();
        queue.enqueue(new NodeQueue("Renad"));
        queue.enqueue(new NodeQueue("Mohammad"));
        queue.enqueue(new NodeQueue("Ali"));

        NodeStack popExpected = new NodeStack("Renad");
        assertEquals(popExpected.getItem(), queue.dequeue().getItem());
    }
    @Test void peekQueue() {
        Queue queue = new Queue();
        queue.enqueue(new NodeQueue("Renad"));
        queue.enqueue(new NodeQueue("Muna"));
        queue.enqueue(new NodeQueue("Islam"));
        NodeQueue peekNextExpected = new NodeQueue("Renad");
        assertEquals(peekNextExpected.getItem(),queue.peek().getItem());
    }
    @Test void emptyUsingDequeue(){
        Queue queue = new Queue();
        queue.enqueue(new NodeQueue("Renad"));
        queue.enqueue(new NodeQueue("Jamil"));
        queue.enqueue(new NodeQueue("Mousa"));
        queue.enqueue(new NodeQueue("Khawatreh"));
        queue.dequeue();
        queue.dequeue();
        queue.dequeue();
        queue.dequeue();
        assertEquals(0,queue.getSIZE());
    }
    @Test void instantiateEmptyQueue() {
        Queue queue = new Queue();
        assertTrue(queue.isEmpty());
    }
    @Test void peekEmptyQueue() {
        Queue queue = new Queue();
        String str="";
        try{
            queue.peek();
        }catch (Exception err){
            str = "Error";
        }
        String expected = "Error";
        assertEquals(expected,str);
    }

}
