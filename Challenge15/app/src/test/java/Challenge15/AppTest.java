/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Challenge15;

import Challenge15.data.Node;
import Challenge15.dataStructure.BinarySearchTree;
import Challenge15.dataStructure.BinaryTree;
import com.sun.source.tree.AssertTree;
import org.junit.Before;
import org.junit.jupiter.api.Test;


import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
    @Test void addEmptyBT() {
        BinaryTree Bt = new BinaryTree();
        assertNull(Bt.getRoot());
    }
    @Test void BTWithRoot() {
        BinaryTree Bt = new BinaryTree(3);
        assertNotNull(Bt.getRoot());
    }
    @Test void inOrderTest() {
        Node root = new Node(1);
        root.setLeft(2);
        root.getLeft().setLeft(3);
        root.getLeft().setRight(4);
        root.setRight(5);
        root.getRight().setLeft(2);
        BinaryTree BT = new BinaryTree(3);
        BT.setRoot(root);
        String expected= "3 => 2 => 4 => 1 => 2 => 5 => ";
        String actual = BT.inOrder(root);
        assertEquals(expected,actual);
    }
    @Test void preOderTest() {
        Node root = new Node(1);
        root.setLeft(2);
        root.getLeft().setLeft(3);
        root.getLeft().setRight(4);
        root.setRight(5);
        root.getRight().setLeft(2);
        BinaryTree BT = new BinaryTree(3);
        BT.setRoot(root);
        String expected= "1 => 2 => 3 => 4 => 5 => 2 => ";
        String actual = BT.preOrder(root);
        assertEquals(expected,actual);
    }
    @Test void postOderTest() {
    Node root = new Node(1);
    root.setLeft(2);
    root.getLeft().setLeft(3);
    root.getLeft().setRight(4);
    root.setRight(5);
    root.getRight().setLeft(2);
    BinaryTree BT = new BinaryTree(3);
    BT.setRoot(root);
    String expected= "1 => 2 => 3 => 4 => 5 => 2 => ";
    String actual = BT.preOrder(root);
    assertEquals(expected,actual);
}
    @Test void addBSTCorrectly() {
        BinarySearchTree BST = new BinarySearchTree();
        BST.add(2);
        BST.add(5);
        BST.add(1);

    }
    @Test void ContainBSTCorrectly() {
        BinarySearchTree BST = new BinarySearchTree();
        Node root=new Node(2);
        BST.setRoot(root);
        BST.add(5);
        BST.add(1);
        assertTrue(BST.Contains(root,1));

    }
}
